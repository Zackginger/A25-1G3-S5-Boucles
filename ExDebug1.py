


def environnement_optimal(temp, poussiere, humidite):
    """
    VÃ©rifie si l'environnement d'un ordinateur est optimal.

    ParamÃ¨tres :
    - temp : tempÃ©rature en Â°C (int ou float)
    - poussiere : niveau de poussiÃ¨re ("faible", "moyen", "Ã©levÃ©")
    - humidite : taux dâ€™humiditÃ© en % (int ou float)

    Retour :
    - "Tout est sous contrÃ´le!" si toutes les conditions sont respectÃ©es
    - "Environnement non optimal" sinon (aprÃ¨s avoir affichÃ© les problÃ¨mes dÃ©tectÃ©s)
    """

    alerte = False

    # VÃ©rification tempÃ©rature
    if temp < 18:
        print("TempÃ©rature trop basse")
        alerte = True
    elif temp > 27:
        print("TempÃ©rature trop Ã©levÃ©e")
        alerte = True

    # VÃ©rification humiditÃ©
    if humidite <= 30:
        print("HumiditÃ© trop basse")
        alerte = True
    elif humidite >= 50:
        print("HumiditÃ© trop Ã©levÃ©e")
        alerte = True

    # VÃ©rification poussiÃ¨re
    if poussiere != "faible":
        print("Trop de poussiÃ¨re")
        alerte = True

    # Retour final
    if not alerte:
        return "Tout est sous contrÃ´le!"
    else:
        return "Environnement non optimal"
listtemp=[]
listpous=[]
listhum=[]

if __name__ == "__main__":
    for i in range(3):
        while True:
            try:
                temps=float(input("entrer la tempÃ©rature: "))
                if temps :
                    listtemp.append(temps)
                    break
                poussiÃ¨re=input("entrer le niveau de poussiÃ¨re: ")
                listpous.append(poussiÃ¨re)
                humiditer=float(input("quelle est l'humiditÃ©: "))
                listhum.append(humiditer)
            except:
                print("ğŸ˜¡ğŸ˜¡ğŸ˜¡not a valid anwserğŸ˜¡ğŸ˜¡ğŸ˜¡")
        print(environnement_optimal(temps, poussiÃ¨re, humiditer))
    print("Les tempÃ©rature:")
    print("-".join(listtemp))
    print("Les niveaux de poussiÃ¨re")
    print("-".join(listpous))
    print("Les niveaux d'humiditÃ©")
    print("-".join(listhum))
